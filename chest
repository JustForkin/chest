#!/bin/bash

# Create chest folder on first run
mkdir -p ~/.chest

# Usage
usage() {
  echo "Usage: chest -e [folder|file]"
  echo "       chest -d [key]"
  echo ""
  echo "  -h       Help. Display this message and quit."
  echo "  -e       Encrypt data and send to chest."
  echo "  -d       Decrypt data from chest."
  echo "  -z       Compress (zip) data before sending to chest."
  echo "  -r       Remove original data after sending to chest."
  echo "  -l       List items in chest."
  echo "  -k [key] Set custom key."
}

# Invalid options
invalid_options() {
  echo "Error invalid option combination"
  usage
  exit 1
}

# Encrypt
encrypt() {

  # Check conflicting options
  if [ $decrypt = true ] || [ $list = true ]
  then
    invalid_options
  fi

  # Input file
  in_file=$item

  # Output file
  if [ $key = false ]
  then
    out_file=$in_file
  else
    out_file=$key
  fi
  out_file="${HOME}/.chest/${out_file}.tar"
  if [ $zip = true ]
  then
    out_file="${out_file}.gz"
  fi
  out_file="${out_file}.gpg"

  # Setup tar args
  args=cv
  if [ $zip = true ]
  then
    args="${args}z"
  fi
  args="${args}f"

  # Password
  echo "Password:"
  read -s password
  echo "Repeat password:"
  read -s password_conf
  if [ $password != $password_conf ]
  then
    echo "Error passwords don't match"
    exit 1
  fi

  # Move to chest
  tar $args - "$in_file" | gpg --batch --passphrase "$password" -c > "$out_file"

  # Send error exit code if tar/gpg fail
  if [ "${PIPESTATUS[0]}${PIPESTATUS[1]}" != "00" ]
  then
    echo "Error couldnt move data to chest"
    exit 1
  fi

  # Remove original
  if [ $remove = true ]
  then
    rm -r "$in_file"
  fi
}

# List
list() {

  # Check conflicting options
  if [ $encrypt = true ] || [ $decrypt = true ] || [ $zip = true ] || [ $remove = true ] || [ $key = true ]
  then
    invalid_options
  fi

  # Loop over all files in chest
  chest_dir="${HOME}/.chest/*"
  for key in $chest_dir; do

    # Remove chest path
    key=${key#$chest_dir}

    # Remove chest extensions
    t=".tar.gpg"
    tgz=".tar.gz.gpg"
    if [[ $key == *$t ]]
    then
      echo ${key%$t}
    elif [[ $key == *$tgz ]]
    then
      echo ${key%$tgz}
    fi

  done
}

# Display usage if no args set
if [ -z "$1" ]
then
  usage
  exit 1
fi

# Set defaults
encrypt=false
decrypt=false
zip=false
remove=false
list=false
key=false

# Parse options
optspec="hedzrlk:"
while getopts "$optspec" optchar
do
  case "${optchar}" in
    h)
      usage
      ;;
    e)
      encrypt=true
      ;;
    d)
      decrypt=true
      ;;
    z)
      zip=true
      ;;
    r)
      remove=true
      ;;
    l)
      list=true
      ;;
    k)
      key=$OPTARG
      ;;
  esac
done
shift $(($OPTIND - 1))
item=$1

# Encrypt
if [ $encrypt = true ]
then
  encrypt
elif [ $decrypt = true ]
then
  decrypt
elif [ $list = true ]
then
  list
fi
