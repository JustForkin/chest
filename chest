#!/bin/bash

# Create chest folder on first run
mkdir -p ~/.chest

# Usage
usage() {
  echo "Usage: chest -e [folder|file]"
  echo "       chest -d [key]"
  echo ""
  echo "  -h       Help. Display this message and quit."
  echo "  -e       Encrypt data and send to chest."
  echo "  -d       Decrypt data from chest."
  echo "  -z       Compress data before sending to chest."
  echo "  -r       Remove original data after sending to chest."
  echo "  -l       List items in chest."
  echo "  -k [key] Set custom key."
}

# Display usage if no args set
if [ -z "$1" ]
then
  usage
  exit 1
fi

# Set defaults
encrypt=false
decrypt=false
compress=false
remove=false
key=false

# Parse options
optspec="hedzrlk:"
while getopts "$optspec" optchar
do
  case "${optchar}" in
    h)
      usage
      ;;
    e)
      encrypt=true
      ;;
    d)
      decrypt=true
      ;;
    z)
      compress=true
      ;;
    r)
      remove=true
      ;;
    l)
      list_keys
      ;;
    k)
      key=$OPTARG
      ;;
  esac
done
shift $(($OPTIND - 1))
item=$1

# Encrypt
if [ $encrypt = true ]
then

  # Check conflicting options
  if [ $decrypt = true ]
  then
    echo "Error cannot use option d and e together"
    usage
    exit 1
  fi

  # Input file
  in_file=$item

  # Output file
  if [ $key = false ]
  then
    out_file=$in_file
  else
    out_file=$key
  fi
  out_file="${HOME}/.chest/${out_file}.tar"
  if [ $compress = true ]
  then
    out_file="${out_file}.gz"
  fi
  out_file="${out_file}.gpg"

  # Setup tar args
  args=cv
  if [ $compress = true ]
  then
    args="${args}z"
  fi
  args="${args}f"

  # Move to chest
  tar $args - "$in_file" | gpg -c > "$out_file"

  # Send error exit code if tar/gpg fail
  if [ "${PIPESTATUS[0]}${PIPESTATUS[1]}" != "00" ]
  then
    exit 1
  fi

  # Remove original
  if [ $remove = true ]
  then
    rm -r "$in_file"
  fi

fi
